<box xs="10" class="offset-xs-1" vertical>
  <box fit>
    <hbox fit>
      <h1>Layout Elements</h1>
      <hbox align="center" justify="end">
        <span>Next {{#link-to 'docs.layout-service'}} Layout Service{{/link-to}}</span>
      </hbox>
    </hbox>
    <br>

    <h4>&lt;screen&gt;&lt;/screen&gt;</h4>
    <p>
      Screen is a relatively positioned block which will take up 100% width
      and a min-height of 100vh.  Screen is ideal for creating a wrapper
      around all of the content on a web page.
    </p>

    <h4>&lt;page&gt;&lt;/page&gt;</h4>
    <p>
      Page is a relatively positioned flex box whose width is 100vw and min-height
      is 100vh.  It defaults to aligning its items vertically.  Page is ideal for
      quickly creating a wrapper that sizes precisely to the viewport.
    </p>

    <h4>&lt;fill&gt;&lt;/fill&gt;</h4>
    <h4>&lt;fill block&gt;&lt;/fill&gt;</h4>
    <p>
      Fill comes in two flavors: flex model and box model (via addition of the `block`
      attribute). In both cases, it attempts to take up all of the available width and
      height to give you a stable size reference point off of which to work.
    </p>
    <p>
      When in flex mode, it defaults to aligning its items horizontally and allows
      them to wrap.  Fill is ideal when you need to reset your mental layout space.
    </p>

    <h4>&lt;centered&gt;&lt;/centered&gt;</h4>
    <p>
      Centered will center its content within the available space.  This is ideal for
      any form of centering.
    </p>

    <h4>&lt;grid&gt;&lt;/grid&gt;</h4>
    <h4>&lt;grid responsive&gt;&lt;/grid&gt;</h4>
    <p>
      Grid is a relatively positioned flex box which aligns its items horizontally
      and will wrap them to the next line, making it ideal for wrapping grid-like
      behavior when no rows are needed.  It has no default flex value.
    </p>
    <p>
      When you add the `responsive` attribute to the grid tag, it becomes a component
      functioning as a container and makes its grid @container aware.
    </p>

    <h4>&lt;box&gt;&lt;/box&gt;</h4>
    <p>
      Box is a relatively positioned flex box which by default will grow to match
      other items (flex: 1 0 0px) but will not expand to fill remaining space. This
      makes it ideal as a generic "box item" within other flex elements.
    </p>

    <h4>&lt;hbox&gt;&lt;/hbox&gt;</h4>
    <p>
      Hbox is a relatively positioned flex box which will expand to fill remaining
      space (flex: 1 0 auto) and will align its items horizontally (hence hbox).
      By default it will wrap its contents to the next line when needed.  This makes
      it ideal for quickly laying out items horizontally.
    </p>

    <h4>&lt;vbox&gt;&lt;/vbox&gt;</h4>
    <p>
      Vbox is a relatively positioned flex box which will expand to fill remaining
      space (flex: 1 0 auto) and will align its items vertically (hence vbox). This
      makes it ideal for quickly laying out items vertically.
    </p>

    <h4>&lt;container&gt;&lt;/container&gt;</h4>
    <p>
      Container is actually an Ember component which sets its tagName to 'container'.
      As an element, it is a relatively positioned flex box with 100% width, with no
      flex property, which will display its content vertically.
    </p>
  </box>
</box>
