@mixin make-col($size, $columns, $gutter-padding) {
  @include element();
  padding-right: pixel($gutter-padding / 2);
  padding-left: pixel($gutter-padding / 2);
  @include flex(1 0 percentage($size / $columns));
  max-width: percentage($size / $columns);
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin breakpoint-up($name, $breakpoints) {
  $breakpoint: map-get($breakpoints, $name);
  $prefix: nth($breakpoint, 1);
  $min: breakpoint-min($name, $breakpoints);

  @if $include-media-css {
    @if $min {
      // @media
      @media (min-width: pixel($min)) {
        @content;
      }
    } @else {
      @content;
    }
  }

  .container-#{$prefix} {
    @content;
  }
}

@mixin make-columns($breakpoints, $column-prefix, $columns) {
  $breakpoint-counter: 0;
  $col-prefix: '';
  @if ($column-prefix) {
    $col-prefix: '#{$column-prefix}-';
  }

  @each $name, $breakpoint-setup in $breakpoints {
    $bp-prefix: nth($breakpoint-setup, 1);
    $breakpoint-counter: ($breakpoint-counter + 1);

    // @media and @container breakpoints
    @include breakpoint-up($name, $breakpoints) {

      // responsive utilities
      .hidden-#{$bp-prefix} {
        display: none;
      }

      .visible-#{$bp-prefix} {
        display: initial;
      }

      .wrap-#{$bp-prefix} {
        @include flexDisplay();
        @include flexWrap(wrap);
      }

      .nowrap-#{$bp-prefix} {
        @include flexDisplay();
        @include flexWrap(nowrap);
      }

      .fit-#{$bp-prefix} {
        @include flex(none);
      }

      .fill-#{$bp-prefix} {
        @include flex(1 0 auto);
      }

      .horizontal-#{$bp-prefix} {
        @include flexDirection(row);
      }

      .vertical-#{$bp-prefix} {
        @include flexDirection(column);
      }

      .justify-start-#{$bp-prefix} {
        @include flexJustify(flex-start);
      }

      .justify-end-#{$bp-prefix} {
        @include flexJustify(flex-end);
      }

      .justify-center-#{$bp-prefix} {
        @include flexJustify(center);
      }

      .justify-between-#{$bp-prefix} {
        @include flexJustify(space-between);
      }

      .justify-around-#{$bp-prefix} {
        @include flexJustify(space-around);
      }

      .align-start-#{$bp-prefix} {
        @include flexAlignItems(flex-start);
      }

      .align-end-#{$bp-prefix} {
        @include flexAlignItems(flex-end);
      }

      .align-stretch-#{$bp-prefix} {
        @include flexAlignItems(stretch);
      }

      .align-center-#{$bp-prefix} {
        @include flexAlignItems(center);
      }

      .align-baseline-#{$bp-prefix} {
        @include flexAlignItems(baseline);
      }

      .align-content-start-#{$bp-prefix} {
        @include flexAlignContent(flex-start);
      }

      .align-content-end-#{$bp-prefix} {
        @include flexAlignContent(flex-end);
      }

      .align-content-stretch-#{$bp-prefix} {
        @include flexAlignContent(stretch);
      }

      .align-content-center-#{$bp-prefix} {
        @include flexAlignContent(center);
      }

      .align-content-around-#{$bp-prefix} {
        @include flexAlignContent(space-around);
      }

      .align-content-between-#{$bp-prefix} {
        @include flexAlignContent(space-between);
      }

      .align-self-start-#{$bp-prefix} {
        @include flexAlignSelf(flex-start);
      }

      .align-self-end-#{$bp-prefix} {
        @include flexAlignSelf(flex-end);
      }

      .align-self-stretch-#{$bp-prefix} {
        @include flexAlignSelf(stretch);
      }

      .align-self-center-#{$bp-prefix} {
        @include flexAlignSelf(center);
      }

      .align-self-baseline-#{$bp-prefix} {
        @include flexAlignSelf(baseline);
      }

      .text-left-#{$bp-prefix} {
        text-align: left;
      }
      .text-right-#{$bp-prefix} {
        text-align: right;
      }
      .text-center-#{$bp-prefix} {
        text-align: center;
      }

      // columns
      @for $i from 1 through $columns {
        .#{$col-prefix}#{$bp-prefix}-#{$i} {
          @include make-col($i, $columns, $gutter-padding);
        }
      }

      // offsets
      // NOTE: Offsets result in unexpected child widths in Chrome versions
      // earlier than v56 and all current Safari versions (as of 2017-01-04).
      // It is currently recommended that you use a <box> sized to the offset
      // you need.
      @for $i from 0 through ($columns - 1) {
        @if $breakpoint-counter != 1 or $i != 0 { // Avoid emitting useless .col-xs-offset-0
          .#{$col-prefix}offset-#{$bp-prefix}-#{$i} {
            margin-left: percentage($i / $columns);
          }
        }
      }

    }
  }
}
